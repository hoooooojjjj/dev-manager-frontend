---
alwaysApply: true
---

## 메타

- **Rule Name**: User Flow & Feature Implementation Guide
- **Type**: Project Rule (Auto-Attached)
- **Applies To**: Agent, Inline Edit
- **Paths**: 프로젝트 전체

## 핵심 워크플로우

**6단계 파이프라인**: Intake → Research → Draft → Review → Prompts → Publish

```
1️⃣ Intake (/new) ✅
   📝 PRD 입력, OAuth 검증, Focus Files 설정

2️⃣ Research (/projects/[id]/research) ✅
   🔍 Brave 검색, 채용공고 분석, Competency Map

3️⃣ Draft (/drafts/[id]) ✅
   📋 Dev Spec 자동 생성, 인용 시스템

4️⃣ Review (/drafts/[id]/review) ✅
   ✏️ 섹션별 수정, Before/After Diff

5️⃣ Prompts (/drafts/[id]/prompts) ✅
   🤖 AI 프롬프트 자동 생성 (Codegen/Test/Review)

6️⃣ Publish
   📤 Notion 자동 발행 (백엔드 구현 대기)
```

## 페이지별 구현 상태

### 🏠 홈페이지 (/) ✅

- **목적**: 시스템 소개, CTA, 프로젝트 접근
- **구현**: 마케팅 섹션, 기능 카드, 최근 프로젝트
- **CTA**: "새 프로젝트 시작", "프로젝트 목록"

### 📝 Intake 폼 (/new) ✅

- **목적**: 프로젝트 생성, OAuth 연결, 파일 지정
- **구현**: React Hook Form + Zod 검증, OAuth 배지, Focus Files 관리
- **API**: POST `/api/v1/projects/intake`

### 📊 프로젝트 목록 (/projects) ✅

- **목적**: 전체 프로젝트 관리, 검색, 필터링
- **구현**: 카드 그리드, 실시간 검색, 상태 필터, 페이지네이션
- **기능**: 검색(제목/레포), 상태별 필터, 정렬

### 🎛️ 프로젝트 대시보드 (/projects/[id]) ✅

- **목적**: 실시간 진행상황 모니터링
- **구현**: 타임라인, 진행률, SSE 로그 스트림, 액션 카드
- **상태**: 6단계 시각화 (queued → publishing)

### 🔬 리서치 패널 (/projects/[id]/research) ✅

- **목적**: Brave 검색 결과, 채용공고, Competency Map
- **구현**: 3탭 구조, 필터링, KPI 배지 시스템
- **탭**: References, Job Postings, Competency Map

### 📋 Dev Spec 뷰어 (/drafts/[id]) ✅

- **목적**: 생성된 명세서 확인, 인용 추적
- **구현**: 자동 목차, 인용 시스템, 진행률 표시
- **섹션**: TL;DR, 현재동작, 근본원인, 해결방안, 학습포인트

### ✏️ 리뷰 인터페이스 (/drafts/[id]/review) ✅

- **목적**: 섹션별 수정, 변경 추적, 승인
- **구현**: 3컬럼 레이아웃, Diff 뷰, 엄격한 인용 검증
- **기능**: Before/After 비교, 롤백, 버전 관리

### 🤖 AI 프롬프트 번들 (/drafts/[id]/prompts) ✅

- **목적**: 개발 착수용 프롬프트 생성
- **구현**: 3종 프롬프트, 구문 하이라이팅, 원클릭 복사
- **종류**: Codegen, Test, Review 프롬프트

## 주요 상호작용 패턴

### 🔍 검색 및 필터링 ✅

- **실시간 검색**: 300ms 디바운싱, URL 동기화
- **상태 필터**: Select 컴포넌트, 동적 필터링
- **결과 표시**: 스켈레톤 로딩, 빈 상태 처리

### 📝 폼 상호작용 ✅

- **실시간 검증**: Zod 스키마, 에러 메시지
- **OAuth 상태**: 실시간 연결 확인, 배지 표시
- **Focus Files**: 동적 추가/제거, 칩 UI

### ⚡ 실시간 업데이트 ✅

- **SSE 연결**: 진행상황 스트림, 자동 재연결
- **상태 동기화**: TanStack Query 캐시 업데이트
- **에러 복구**: 네트워크 끊김 시 자동 복구

### 🎨 UI/UX 패턴 ✅

- **로딩 상태**: 스켈레톤, 스피너, 프로그레스 바
- **에러 처리**: 토스트, 에러 바운더리, 재시도 옵션
- **성공 피드백**: 토스트 알림, 상태 변경 애니메이션

## 상태 관리 전략

### 서버 상태 (TanStack Query) ✅

```typescript
// 캐싱 전략
staleTime: 5 * 1000     // 5초간 fresh
gcTime: 5 * 60 * 1000   // 5분간 캐시 보관
retry: 4xx 에러는 재시도 안함
```

### 로컬 UI 상태 (Zustand) ✅

```typescript
// useUi 스토어
- 사이드바 상태
- 토스트 알림 관리
- 모달 상태 관리
```

### URL 상태 (SearchParams) ✅

```typescript
// 검색 & 필터 상태 URL 동기화
- 검색 쿼리
- 필터 조건
- 페이지네이션
```

## 접근성 구현 (WCAG 2.1 AA)

### 키보드 네비게이션 ✅

- 모든 인터랙티브 요소 Tab 순서
- Enter/Space 키 액션 지원
- Escape 키로 모달/드롭다운 닫기

### 스크린 리더 지원 ✅

- ARIA 레이블 및 역할 정의
- `aria-live` 영역으로 동적 콘텐츠 알림
- `aria-expanded`, `aria-selected` 상태 표시

### 시각적 접근성 ✅

- 색상 대비 4.5:1 이상 유지
- 포커스 표시 스타일 명확화
- `prefers-reduced-motion` 대응

## 성능 최적화

### 로딩 최적화 ✅

- **코드 스플리팅**: 페이지별 자동 분할
- **지연 로딩**: 스크롤 기반 컨텐츠 로딩
- **이미지 최적화**: Next.js Image 컴포넌트

### 런타임 최적화 ✅

- **메모이제이션**: React.memo, useMemo, useCallback
- **가상 스크롤**: 대량 데이터 효율 렌더링 (예정)
- **디바운싱**: 검색 입력 최적화

### 캐싱 전략 ✅

- **TanStack Query**: SWR 패턴 적용
- **브라우저 캐싱**: 정적 자산 장기 캐싱
- **로컬 스토리지**: 사용자 설정 저장

## 에러 처리 전략

### 네트워크 에러 ✅

```typescript
// 자동 재시도 로직
retry: (failureCount, error) => {
  if (error?.status >= 400 && error?.status < 500) {
    return false; // 4xx는 재시도 안함
  }
  return failureCount < 3;
};
```

### UI 에러 ✅

- **에러 바운더리**: 컴포넌트 격리된 복구
- **토스트 알림**: 사용자 친화적 에러 메시지
- **재시도 옵션**: 실패한 액션 재실행

### 검증 에러 ✅

- **실시간 검증**: 입력과 동시에 피드백
- **필드별 에러**: 구체적인 에러 메시지
- **폼 상태 복구**: 새로고침 시 입력 내용 보존

## MSW 모킹 시스템

### 개발 환경 모킹 ✅

```typescript
// 샘플 데이터
- 4개 다양한 상태 프로젝트
- OAuth 연결 시뮬레이션
- 실시간 로그 스트림
- 에러 케이스 시뮬레이션
```

### API 응답 구조 ✅

```typescript
// 표준 응답 형식
{
  data: T,
  correlationId: string,
  timestamp?: string
}

// 에러 응답 (ProblemDetails)
{
  type: string,
  title: string,
  status: number,
  correlationId: string
}
```

## 배포 및 CI/CD

### Vercel 배포 ✅

- **자동 배포**: main 브랜치 푸시 시
- **프리뷰 배포**: PR 생성 시
- **환경 변수**: 기본값 `/api/v1` 설정

### GitHub Actions ✅

- **품질 검증**: TypeScript + ESLint + 테스트
- **빌드 검증**: 프로덕션 빌드 테스트
- **E2E 테스트**: Playwright 자동 실행

## 향후 확장 고려사항

### 기능 확장

- **다국어 지원**: next-intl 추가
- **실시간 협업**: WebSocket 기반 멀티유저
- **오프라인 지원**: Service Worker + 캐시

### 성능 확장

- **서버 컴포넌트**: 더 많은 SSR 활용
- **스트리밍**: React 18 Suspense 스트리밍
- **CDN 최적화**: 정적 자산 글로벌 배포

### 모니터링 확장

- **성능 추적**: Web Vitals 수집
- **에러 추적**: Sentry 통합
- **사용자 분석**: Google Analytics 연동
